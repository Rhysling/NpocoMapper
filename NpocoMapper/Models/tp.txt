using System;
using System.Collections.Generic;
using System.Linq;
using NPoco;
using Crosserator.Models;
using Crosserator.Repositories.Core;

namespace Crosserator.Repositories
{{
	public class CrossDb : RepositoryBase
	{{

		public int Save(Cross entity)
		{{
			db.Save<Cross>(entity);
			return entity.CrossId;
		}}

		public bool Save(IEnumerable<Cross> items)
		{{
			foreach (Cross item in items)
			{{
				db.Save<Cross>(item);
			}}
			return true;
		}}

		public bool Delete(int crossId)
		{{
			string sql = ""UPDATE Crosses SET IsDeleted = 1 WHERE (CrossId = @0);"";

			db.Execute(sql, crossId);
			return true;
		}}

		public bool Delete(IEnumerable<int> ids)
		{{
			foreach (int id in ids)
			{{
				db.Delete<Cross>(id);
			}}
			return true;
		}}

		public bool Destroy(int id)
		{{
			db.Delete<Cross>(id);
			return true;
		}}

		public Cross FindBy(int id)
		{{
			return db.SingleOrDefaultById<Cross>(id);
		}}

		public IEnumerable<Cross> All()
		{{
			return db.Fetch<Cross>("" "");
		}}


		//Example - filtered list:
		public IEnumerable<CrossSummary> FilteredList(string str1, string str2)
		{
			return db.Fetch<CrossSummary>("WHERE (v1=@p1) AND (v2=@p2)", new {p1 = str1, p2 = str2});
		}

		//Example - paged & filtered list:
		public Page<CrossSummary> PagedFilteredList(string str1, string str2, long page, long itemsPerPage)
		{
			return db.Page<CrossSummary>(page, itemsPerPage, "WHERE (v1=@p1) AND (v2=@p2)", new {p1 = str1, p2 = str2});
		}
	}}
}}

