<#@ include file="NPoco.Core.ttinclude" #>
<#
	 // Settings ********************************
	ApplicationName = "Crosserator";
	ConnectionStringName = "ConStr_For_T4";

	Namespace = ApplicationName + ".Models";
	RepositoryNamespace = ApplicationName + ".Repositories";
	RepoName = ApplicationName + "DB";

	ClassPrefix = "";
	ClassSuffix = "";

	GenerateOperations = true;

	GenerateEnums = true;
	OverwriteEnums = true;

	GeneratePocos = true;
	OverwriteRwPocos = false;
	OverwriteRoPocos = false;

	GenerateRepos = true;
	OverwriteRepos = false;

	GenerateTypeScriptInterfaces = false;

	DefaultToExcludeTables = false;

	// Check directories are created ***
	CheckOutputDirectories();

	//Debugger.Break();

	// Read schema
	var tables = LoadTables();

/*
	// Tweak Schema
	tables["tablename"].Ignore = true;							// To ignore a table
	tables["tablename"].ClassName = "newname";					// To change the class name of a table
	tables["tablename"]["columnname"].Ignore = true;			// To ignore a column
	tables["tablename"]["columnname"].PropertyName="newname";	// To change the property name of a column
	tables["tablename"]["columnname"].PropertyType="bool";		// To change the property type of a column
*/

	// Ignore the ObjectsWithCustomType table (We made that POCO by hand and left it in to test custom type value binding.)
	// try/catch because the table may not exist.
	try {
		tables["ObjectsWithCustomType"].Ignore = false;
	} catch {}

	// Table name patterns to ignore:
	string[] ignoreTableNames = new string[] { "MarketData" };



	// Force Enums from specified tables
	ForceEnumList = new List<ForceEnum>();

	ForceEnumList = new List<ForceEnum>{
		new ForceEnum {
			TableName = "ListObjects",
			EnumName = "ListObjectsEnum",
			EnumNameColumnName = "ShortName",
			EnumValueColumnName = "Id",
			EnumDescriptionColumnName = "Description"
		}
	};


	// Generate output
	if (tables.Count > 0)
	{
		foreach(Table tbl in tables.Where(a=> (a.Ignore == false) && !ignoreTableNames.Any(b => a.Name.StartsWith(b))))
		{
			bool makeEnum = false;
			var fe = ForceEnumList.Where(a => a.TableName == tbl.Name).FirstOrDefault();
			if (fe != null)
			{
				tbl.EnumName = String.IsNullOrEmpty(fe.EnumName) ? tbl.EnumName : fe.EnumName;
				makeEnum = true;
			}
			else
			{
				fe = new ForceEnum();
				makeEnum = tbl.IsEnum;
			}

			bool isRw = (tbl.PK != null && tbl.PK.Any());


			if (GenerateEnums && makeEnum && DoCreateEntity(tbl, EntityType.Enum))
			{
				MakeEnum(tbl, fe.EnumNameColumnName, fe.EnumValueColumnName, fe.EnumDescriptionColumnName);
			}

			if (GeneratePocos)
			{
				if (isRw && DoCreateEntity(tbl, EntityType.PocoRw))
				{
					MakePocoRw(tbl, GenerateTypeScriptInterfaces);
				}
				else if (!isRw && DoCreateEntity(tbl, EntityType.PocoRo))
				{
					MakePocoRo(tbl, GenerateTypeScriptInterfaces);
				}
			}

			if (GenerateRepos)
			{
			 if (isRw && DoCreateEntity(tbl, EntityType.RepoRw))
				{
					if (tbl.PK[0].IsAutoIncrement)
					{
						MakeRepoIdentity(tbl);
					}
					else
					{
						MakeRepoKeyed(tbl);
					}
				}
				else if (!isRw && DoCreateEntity(tbl, EntityType.RepoRo))
				{
					MakeRepoNoKey(tbl);
				}
			}
		} // end foreach

	} // end if

	MakeOperations();

#>
<#@ include file="NPoco.Gen.Enum.ttinclude" #>
<#@ include file="NPoco.Gen.PocoRw.ttinclude" #>
<#@ include file="NPoco.Gen.PocoRo.ttinclude" #>
<#@ include file="NPoco.Gen.RepoIdentity.ttinclude" #>
<#@ include file="NPoco.Gen.RepoKeyed.ttinclude" #>
<#@ include file="NPoco.Gen.RepoNoKey.ttinclude" #>
<#@ include file="NPoco.Gen.Ops.ttinclude" #>
